/* tslint:disable */
/* eslint-disable */
/**
 * AlterOrb API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    Achievement,
    AchievementFromJSON,
    AchievementToJSON,
    Game,
    GameFromJSON,
    GameToJSON,
    HighscoresOrbPoints,
    HighscoresOrbPointsFromJSON,
    HighscoresOrbPointsToJSON,
    PlayerAchievement,
    PlayerAchievementFromJSON,
    PlayerAchievementToJSON,
} from '../models';

export interface AccountAchievementsRequest {
    uuid: string;
    gameId?: string;
}

export interface AccountDetailRequest {
    uuid: string;
}

export interface HighscoresRequest {
    mode: HighscoresModeEnum;
}

export interface ListGameAchievementsRequest {
    id: string;
}

export interface SearchAccountsRequest {
    displayName: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Lists all the achievements that the provided account has
     */
    async accountAchievementsRaw(requestParameters: AccountAchievementsRequest): Promise<runtime.ApiResponse<Array<PlayerAchievement>>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling accountAchievements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.gameId !== undefined) {
            queryParameters['gameId'] = requestParameters.gameId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{uuid}/achievements`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerAchievementFromJSON));
    }

    /**
     * Lists all the achievements that the provided account has
     */
    async accountAchievements(uuid: string, gameId?: string): Promise<Array<PlayerAchievement>> {
        const response = await this.accountAchievementsRaw({ uuid: uuid, gameId: gameId });
        return await response.value();
    }

    /**
     * Fetches the detailed account information for the provided uuid
     */
    async accountDetailRaw(requestParameters: AccountDetailRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling accountDetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Fetches the detailed account information for the provided uuid
     */
    async accountDetail(uuid: string): Promise<Account> {
        const response = await this.accountDetailRaw({ uuid: uuid });
        return await response.value();
    }

    /**
     * Looks up the top highscores entries depending on the selected mode
     */
    async highscoresRaw(requestParameters: HighscoresRequest): Promise<runtime.ApiResponse<Array<HighscoresOrbPoints>>> {
        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling highscores.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/highscores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HighscoresOrbPointsFromJSON));
    }

    /**
     * Looks up the top highscores entries depending on the selected mode
     */
    async highscores(mode: HighscoresModeEnum): Promise<Array<HighscoresOrbPoints>> {
        const response = await this.highscoresRaw({ mode: mode });
        return await response.value();
    }

    /**
     * Lists all of the available achievements for a game
     */
    async listGameAchievementsRaw(requestParameters: ListGameAchievementsRequest): Promise<runtime.ApiResponse<Array<Achievement>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listGameAchievements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{id}/achievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AchievementFromJSON));
    }

    /**
     * Lists all of the available achievements for a game
     */
    async listGameAchievements(id: string): Promise<Array<Achievement>> {
        const response = await this.listGameAchievementsRaw({ id: id });
        return await response.value();
    }

    /**
     * Lists all the AlterOrb games, even unsupported ones.
     */
    async listGamesRaw(): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * Lists all the AlterOrb games, even unsupported ones.
     */
    async listGames(): Promise<Array<Game>> {
        const response = await this.listGamesRaw();
        return await response.value();
    }

    /**
     * Searches for an account via it\'s display name
     */
    async searchAccountsRaw(requestParameters: SearchAccountsRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.displayName === null || requestParameters.displayName === undefined) {
            throw new runtime.RequiredError('displayName','Required parameter requestParameters.displayName was null or undefined when calling searchAccounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.displayName !== undefined) {
            queryParameters['displayName'] = requestParameters.displayName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Searches for an account via it\'s display name
     */
    async searchAccounts(displayName: string): Promise<Account> {
        const response = await this.searchAccountsRaw({ displayName: displayName });
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum HighscoresModeEnum {
    Orbpoints = 'orbpoints'
}
